AWSTemplateFormatVersion: 2010-09-09
Description: simple email service and related configs

Parameters:
  ZoneName:
    Type: String
  ZoneId:
    Type: String

#Conditions:
#Mappings:
#Metadata:

Resources:

  CustomLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeLambdaExecutionRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: SESDomainIdentityPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowSESDomainIdentityActions
            Effect: Allow
            Action:
            - ses:ListIdentities
            - ses:VerifyDomainDkim
            - ses:VerifyDomainIdentity
            - ses:DeleteIdentity
            Resource: "*"
          - Sid: AlowRoute53Actions
            Effect: Allow
            Action:
            - route53:ChangeResourceRecordSets
            Resource: !Sub "arn:aws:route53:::hostedzone/${ZoneId}"

  CustomBackedLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function for lambda-backed cfn custom resource
      Runtime: python3.9
      Role: !GetAtt CustomLambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Timeout: 90
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import os
          
          def lambda_handler(event, context):

            log = logging.getLogger()
            log.setLevel(logging.INFO)
            print(event)
            responseData = {}

            try:

              request = event['RequestType']
              properties = event['ResourceProperties']
              ZoneName = properties['ZoneName']
              ZoneId = properties['ZoneId']
              ses = boto3.client('ses')

              # CREATE and UPDATE events are effectively the same because
              # Changes to custom resource properties will cause cfn to create a new resource and delete the old one
              if request in {'Create', 'Update'}:
                responseData['message'] = "Lambda saw the CREATE/UPDATE request"
                print(properties)
                #print("Lambda got 'ZoneName' in the request: " + ZoneName)
                #print("Lambda got 'ZoneId' in the request: " + ZoneId)

                # Create domain identity verification
                #verify_domain = ses.verify_domain_identity(Domain=ZoneName)
                # This is for TXT record but is not required if DKIM is used
                #verify_token = verify_domain['VerificationToken']
                #print(verify_token)

                # Creating DKIM tokens also creates the identity
                dkim = ses.verify_domain_dkim(Domain=ZoneName)
                tokens = dkim['DkimTokens']
                print(tokens)

                log.info('Created verification identity for ' + ZoneName)

              # 'ResourceProperties' in DELETE events are the same as 'OldResourceProperties' in UPDATE events
              elif request == 'Delete':
                print("Lambda saw the DELETE request")
                print(properties)

                identities = ses.list_identities(IdentityType='Domain')['Identities']
                for identity in identities:
                  if identity == ZoneName.lower():
                    delete_identity = ses.delete_identity(Identity=ZoneName)
                    #print(delete_identity)
                    log.info('Deleted old verification identity for ' + identity)
                  else:
                    log.info('Skipping deletion of verification identity for ' + identity)

              else:
                responseData['message'] = "Nothing to do!"
                log.info('Lambda did not do anything')

            # Send FAILED back to cfn for any unexpected error
            except Exception:
              log.exception('Signaling failure to CloudFormation.')
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
            
            else:
              # Always send SUCCESS back to cfn if lambda did what it was supposed to do
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              
              # This works but doesn't show in the cloudformation console
              ## reason = "enter a custom reason here"
              ## cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, '', '', reason)

  InvokeCustomLambda:
    Type: Custom::InvokeCustomLambda
    Properties:
      ServiceToken: !GetAtt CustomBackedLambda.Arn
      ZoneName: !Ref ZoneName
      ZoneId: !Ref ZoneId

# Create domain identity
# aws ses verify-domain-identity --domain example.com

# Create dkim records
# aws ses verify-domain-dkim --domain example.com

Outputs:
  CustomLambdaOutput: 
    Description: Message from custom lambda
    Value: !GetAtt InvokeCustomLambda.message