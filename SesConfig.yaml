AWSTemplateFormatVersion: 2010-09-09
Description: simple email service and related configs

Parameters:
  ZoneName:
    Type: String
  ZoneId:
    Type: String
  RecipientEmails:
    Type: CommaDelimitedList
  RecipientFilters:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  EmailBucketName:
    Type: String
  ForwardToAddress:
    Type: String

Conditions:
  RecipientFilterCond: !Equals [ !Ref RecipientFilters, true ]

Resources:

  CustomLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeLambdaExecutionRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: SESDomainIdentityPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowSESDomainIdentityActions
            Effect: Allow
            Action:
            - ses:ListIdentities
            - ses:VerifyDomainDkim
            - ses:VerifyDomainIdentity
            - ses:SetActiveReceiptRuleSet
            - ses:DeleteIdentity
            Resource: "*"

  CustomBackedLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function for lambda-backed cfn custom resource
      Runtime: python3.9
      Role: !GetAtt CustomLambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Timeout: 90
      Code:
        ZipFile: | #py
          import boto3
          import cfnresponse
          import logging
          
          def lambda_handler(event, context):
            log = logging.getLogger()
            #log.setLevel(logging.INFO)
            print(event)
            
            try:
              ses = boto3.client('ses')
              ResourceType = event['ResourceType']
              RequestType = event['RequestType']
              responseData = {}
              records = []

              if ResourceType == "Custom::InvokeCustomLambda":
                ZoneName = event['ResourceProperties']['ZoneName']

                # Changes to custom resource properties will cause cfn to create a new resource and delete the old one
                # This means CREATE and UPDATE events are effectively the same
                if RequestType in {"Create", "Update"}:
                  print("Got CREATE/UPDATE request for " + ZoneName)

                  # Create DKIM tokens for identity verification
                  # Creating DKIM tokens also creates the identity
                  # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ses.html#SES.Client.verify_domain_dkim
                  dkim = ses.verify_domain_dkim(Domain=ZoneName)
                  tokens = dkim['DkimTokens']

                  # Create DNS records to complete identity verification
                  for DkimTokens in tokens:
                    record = {
                      "Name": "{dkim_token}._domainkey.{zone_name}".format(dkim_token=DkimTokens,zone_name=ZoneName),
                      "Type": "CNAME",
                      "TTL": "60",
                      "ResourceRecords": [
                        "{dkim_token}.dkim.amazonses.com".format(dkim_token=DkimTokens)
                      ]
                    }
                    records.append(record)

                  # Send data back to cfn
                  responseData['records'] = records
                  responseData['message'] = "Created verification identity for " + ZoneName

                # 'ResourceProperties' in DELETE events are the same as 'OldResourceProperties' in UPDATE events
                elif RequestType == "Delete":
                  print("Got DELETE request for " + ZoneName)
                  ses.delete_identity(Identity=ZoneName)
                  print("Deleted identity verification for " + ZoneName)
                  # This is here mainly for changes to the identity/ZoneName
                  # If a duplicate identity is submitted for verification
                  # The identity may be deleted but the DNS records will not
                  # And then magically restored even though logging will show it was deleted here

              elif ResourceType == "Custom::SetActiveRuleSet" and RequestType != "Delete":
                RuleSetName = event['ResourceProperties']['RuleSetName']
                print("Setting the following SES rule set as active: " + RuleSetName)
                ses.set_active_receipt_rule_set(RuleSetName=RuleSetName)

              else:
                print("Lambda got RequestType: " + RequestType + " but did nothing")

            # Send FAILED back to cfn for any unexpected error
            except Exception:
              log.exception('Signaling failure to CloudFormation.')
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
            
            else:
              # Always send SUCCESS back to cfn if lambda did what it was supposed to do
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  SesDomainIdentityMail:
    Type: Custom::InvokeCustomLambda
    Properties:
      ServiceToken: !GetAtt CustomBackedLambda.Arn
      ZoneName: !Ref ZoneName

# The responseData returned from the custom resource is not persisted between change sets so
# Do not modify the RecordSetGroup if the corresponding SES identity has been verified and is in use
  SesDkimRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: DNS records to complete SES domain identity verification
      HostedZoneId: !Ref ZoneId
      RecordSets: !GetAtt SesDomainIdentityMail.records
  
  SesMxRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: DNS record for SES to manage incoming email
      HostedZoneId: !Ref ZoneId
      Name: !Ref ZoneName
      TTL: 60
      Type: MX
      ResourceRecords:
      - !Sub "10 inbound-smtp.${AWS::Region}.amazonaws.com"

  SesReceiptRuleSet:
    Type: AWS::SES::ReceiptRuleSet

# Active rules sets can not be deleted  
  SesActiveRulesSetDefault:
    Type: Custom::SetActiveRuleSet
    Properties:
      ServiceToken: !GetAtt CustomBackedLambda.Arn
      RuleSetName: !Ref SesReceiptRuleSet

# Lambda for simple email parsing via SNS
  SimpleEmailParserLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeLambdaExecutionRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SimpleEmailParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function for processing emails
      Runtime: python3.12
      Role: !GetAtt SimpleEmailParserLambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Timeout: 90
      Code:
        ZipFile: | #py
          import json
          import boto3
          import botocore
          import email
          from email.header import decode_header
          
          ses = boto3.client('ses')

          def lambda_handler(event, context):
            print(event)

            records = event['Records']
            for record in records:
              message = record['Sns']['Message']
              print(message)
              json_msg = json.loads(message)
              content = json_msg['content']
              print(content)

              parsed_msg = email.message_from_string(content)

              try:
                if parsed_msg.is_multipart():
                  for part in parsed_msg.walk():
                    content_type = part.get_content_type()
                    if content_type == 'text/plain':
                      decoded_msg = decode_email_body(part)
                      print(decoded_msg)
                else:
                  decoded_msg = decode_email_body(parsed_msg)
                  print(decoded_msg)
              except botocore.exceptions.ClientError as error:
                raise error
          
          def decode_email_body(part):
            charset = part.get_content_charset()
            payload = part.get_payload(decode=True)
            decoded_msg = payload.decode(charset or 'utf-8', 'replace')
            return decoded_msg

  SimpleEmailParserSnsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SimpleEmailParserLambda.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      # construct the arn to avoid a circular dependency
      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*

  SimpleEmailParserSnsTopic:
    Type: AWS::SNS::Topic
    DependsOn: SimpleEmailParserSnsLambdaInvokePermission
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt SimpleEmailParserLambda.Arn
  
# Bucket and lambda for forwarding emails
  EmailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref EmailBucketName
  
  EmailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EmailBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Principal:
              Service: ses.amazonaws.com
            Resource:
              - !Sub arn:aws:s3:::${EmailBucket}/*
            Condition:
              StringEquals:
                'aws:Referer':
                  - !Ref AWS::AccountId
  
  EmailForwarderLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AssumeLambdaExecutionRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: '*'
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource: !Sub arn:aws:s3:::${EmailBucket}/*
              - Action:
                  - ses:SendRawEmail
                Effect: Allow
                Resource: '*'

  EmailForwarderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function for forwarding emails
      Runtime: python3.12
      Role: !GetAtt EmailForwarderLambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Timeout: 90
      Environment:
        Variables:
          BUCKET_NAME: !Ref EmailBucket
          FORWARD_TO_ADDRESS: !Ref ForwardToAddress
          DOMAIN: !Ref ZoneName
      Code:
        ZipFile: | #py
          import os
          import boto3
          from botocore.exceptions import ClientError
          import email
          from email import policy
          from email.parser import BytesParser
          import re

          s3 = boto3.client('s3')
          ses = boto3.client('ses')

          bucket_name = os.environ['BUCKET_NAME']
          forward_to_address = os.environ['FORWARD_TO_ADDRESS']
          domain = os.environ['DOMAIN']

          def lambda_handler(event, context):
            print(event)
            # Extract the message ID and receipient from the SES event
            message_id = event['Records'][0]['ses']['mail']['messageId']
            original_recipient = event['Records'][0]['ses']['mail']['destination'][0]

            # Retrieve the raw email object from S3 using the prefix + message ID
            object_key = (original_recipient + "/" + message_id)
            get_object_response = s3.get_object(Bucket=bucket_name, Key=object_key)
            raw_email = get_object_response['Body'].read()

            # Parse the email to extract the original sender and subject
            mail = BytesParser(policy=policy.default).parsebytes(raw_email)
            original_sender = mail['From']
            original_subject = mail['Subject']
            
            # get 'friendly name' from sender address
            # this is a hack but it's to myself and I consent so..
            if re.search(r'<[^>]*>', original_sender):
              # Remove '<*>'
              friendly_name = re.sub(r'<[^>]*>', '', original_sender).strip()
            else:
              # Return empty string if there's no 'friendly name'
              friendly_name = ''

            # Create a noreply address under the verified domain
            if friendly_name:
              noreply_address = f"{friendly_name} <noreply@{domain}>"
            else:
              noreply_address = f"noreply@{domain}"

            # Replace original sender and return-path with the noreply address
            mail.replace_header('From', noreply_address)
            mail.replace_header('Return-Path', f"noreply@{domain}")

            # Add/replace header for replies to original sender
            if mail.get('Reply-To'):
              mail.replace_header('Reply-To', original_sender)
            else:
              mail.add_header('Reply-To', original_sender)
            
            # To prevent "Duplicate header 'DKIM-Signature'" error
            for header in list(mail.keys()):
              if header == "DKIM-Signature" and "amazonses.com" in mail[header]:
                del mail[header]

            # Forward the email using SES, keeping its original content
            try:
              send_raw_email_response = ses.send_raw_email(
                Source=original_recipient,  # Your verified SES sender email
                Destinations=[forward_to_address],  # Forwarding recipient(s)
                RawMessage={'Data': mail.as_bytes()}
              )
              print(send_raw_email_response)
            except ClientError as error:
              print(error.response)

  EmailForwarderSesLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EmailForwarderLambda.Arn
      Action: lambda:InvokeFunction
      Principal: ses.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      # construct the arn to avoid a circular dependency
      SourceArn: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:receipt-rule-set/${SesReceiptRuleSet}:receipt-rule/*

  ReceiptRuleDefault:
    Type: AWS::SES::ReceiptRule
    Properties:
      RuleSetName: !Ref SesReceiptRuleSet
      Rule:
        Enabled: true
        ScanEnabled: true
        TlsPolicy: Require
        Recipients: !Ref RecipientEmails
        Actions:
          - SNSAction: 
              Encoding: UTF-8
              TopicArn: !Ref SimpleEmailParserSnsTopic
  
  ReceiptRule0:
    Type: AWS::SES::ReceiptRule
    DependsOn: EmailBucketPolicy
    Properties:
      RuleSetName: !Ref SesReceiptRuleSet
      After: !Ref ReceiptRuleDefault
      Rule:
        Enabled: true
        ScanEnabled: true
        TlsPolicy: Require
        Recipients:
          - !Select [0, !Ref RecipientEmails] 
        Actions:
          - S3Action:
              BucketName: !Ref EmailBucket
              ObjectKeyPrefix: !Select [0, !Ref RecipientEmails] 
          - LambdaAction:
              FunctionArn: !GetAtt EmailForwarderLambda.Arn
  
  ReceiptFilterBlock:
    Type: AWS::SES::ReceiptFilter
    Condition: RecipientFilterCond
    Properties:
      Filter:
        IpFilter:
          Policy: Block
          Cidr: 0.0.0.0/0

  ReceiptFilterAllow:
    Type: AWS::SES::ReceiptFilter
    Condition: RecipientFilterCond
    Properties:
      Filter:
        IpFilter:
          Policy: Allow
          Cidr: 209.85.0.0/16

Outputs:
  CustomLambdaOutput: 
    Description: Message from the SES domain verification custom resource
    Value: !GetAtt SesDomainIdentityMail.message