AWSTemplateFormatVersion: 2010-09-09
Description: simple email service and related configs

Parameters:
  Domain:
    Type: String
#Conditions:
#Mappings:
#Metadata:

Resources:

  CustomLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeLambdaExecutionRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: SESDomainIdentityPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowSESDomainIdentityActions
            Effect: Allow
            Action:
            - ses:VerifyDomainDkim
            - ses:VerifyDomainIdentity
            - ses:DeleteIdentity
            Resource: "*"

  CustomBackedLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function for lambda-backed cfn custom resource
      Runtime: python3.9
      Role: !GetAtt CustomLambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Timeout: 90
      Environment:
        Variables:
          number: 10
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import os
          
          # Init of the logging module
          logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
          
          def lambda_handler(event, context):
            number = os.environ['number']
            print(event)
            name = event['ResourceProperties']['Domain']
            responseData = {}

            if event.get('RequestType') == 'Create':
              responseData['message'] = "Got name: " + name
              responseData['other'] = "something else"
              logging.info('Sending %s to cloudformation', responseData['message'])
              
            elif event.get('RequestType') == 'Delete':
              responseData['message'] = "Goodbye from lambda"
              logging.info('Sending %s to cloudformation', responseData['message'])

            else:
              responseData['message'] = "Nothing to do!"
              logging.error('Unknown operation: %s', event.get('RequestType'))
            
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  InvokeCustomLambda1:
    Type: Custom::InvokeCustomLambda
    Properties:
      ServiceToken: !GetAtt CustomBackedLambda.Arn
      Domain: !Ref Domain

# Create domain identity
# aws ses verify-domain-identity --domain example.com

# Create dkim records
# aws ses verify-domain-dkim --domain example.com

Outputs:
  CustomLambdaOutput: 
    Description: Message from custom lambda
    Value: !GetAtt InvokeCustomLambda1.message