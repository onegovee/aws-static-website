AWSTemplateFormatVersion: 2010-09-09
Description: simple email service and related configs

Parameters:
  ZoneName:
    Type: String
  ZoneId:
    Type: String
  RecipientEmail:
    Type: String

#Conditions:
#Mappings:
#Metadata:

Resources:

  CustomLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeLambdaExecutionRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: SESDomainIdentityPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowSESDomainIdentityActions
            Effect: Allow
            Action:
            - ses:ListIdentities
            - ses:VerifyDomainDkim
            - ses:VerifyDomainIdentity
            - ses:SetActiveReceiptRuleSet
            - ses:DeleteIdentity
            Resource: "*"

  CustomBackedLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function for lambda-backed cfn custom resource
      Runtime: python3.9
      Role: !GetAtt CustomLambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Timeout: 90
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          
          def lambda_handler(event, context):
            log = logging.getLogger()
            #log.setLevel(logging.INFO)
            print(event)
            
            try:
              ses = boto3.client('ses')
              ResourceType = event['ResourceType']
              RequestType = event['RequestType']
              responseData = {}
              records = []

              if ResourceType == "Custom::InvokeCustomLambda":
                ZoneName = event['ResourceProperties']['ZoneName']

                # Changes to custom resource properties will cause cfn to create a new resource and delete the old one
                # This means CREATE and UPDATE events are effectively the same
                if RequestType in {"Create", "Update"}:
                  print("Got CREATE/UPDATE request for " + ZoneName)

                  # Create DKIM tokens for identity verification
                  # Creating DKIM tokens also creates the identity
                  # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ses.html#SES.Client.verify_domain_dkim
                  dkim = ses.verify_domain_dkim(Domain=ZoneName)
                  tokens = dkim['DkimTokens']

                  # Create DNS records to complete identity verification
                  for DkimTokens in tokens:
                    record = {
                      "Name": "{dkim_token}._domainkey.{zone_name}".format(dkim_token=DkimTokens,zone_name=ZoneName),
                      "Type": "CNAME",
                      "TTL": "60",
                      "ResourceRecords": [
                        "{dkim_token}.dkim.amazonses.com".format(dkim_token=DkimTokens)
                      ]
                    }
                    records.append(record)

                  # Send data back to cfn
                  responseData['records'] = records
                  responseData['message'] = "Created verification identity for " + ZoneName

                # 'ResourceProperties' in DELETE events are the same as 'OldResourceProperties' in UPDATE events
                elif RequestType == "Delete":
                  print("Got DELETE request for " + ZoneName)
                  ses.delete_identity(Identity=ZoneName)
                  print("Deleted identity verification for " + ZoneName)
                  # This is here mainly for changes to the identity/ZoneName
                  # If a duplicate identity is submitted for verification
                  # The identity may be deleted but the DNS records will not
                  # And then magically restored even though logging will show it was deleted here

              elif ResourceType == "Custom::SetActiveRuleSet" and RequestType != "Delete":
                RuleSetName = event['ResourceProperties']['RuleSetName']
                print("Setting the following SES rule set as active: " + RuleSetName)
                ses.set_active_receipt_rule_set(RuleSetName=RuleSetName)

              else:
                print("Lambda got RequestType: " + RequestType + " but did nothing")

            # Send FAILED back to cfn for any unexpected error
            except Exception:
              log.exception('Signaling failure to CloudFormation.')
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
            
            else:
              # Always send SUCCESS back to cfn if lambda did what it was supposed to do
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  SesDomainIdentityMail:
    Type: Custom::InvokeCustomLambda
    Properties:
      ServiceToken: !GetAtt CustomBackedLambda.Arn
      ZoneName: !Ref ZoneName

# The responseData returned from the custom resource is not persisted between change sets so
# Do not modify the RecordSetGroup if the corresponding SES identity has been verified and is in use
  SesDkimRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: DNS records to complete SES domain identity verification
      HostedZoneId: !Ref ZoneId
      RecordSets: !GetAtt SesDomainIdentityMail.records
  
  SesMxRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: DNS record for SES to manage incoming email
      HostedZoneId: !Ref ZoneId
      Name: !Ref ZoneName
      TTL: 60
      Type: MX
      ResourceRecords:
      - !Sub "10 inbound-smtp.${AWS::Region}.amazonaws.com"

  SnsTopic:
    Type: AWS::SNS::Topic

  SesReceiptRuleSet:
    Type: AWS::SES::ReceiptRuleSet
    Properties:
      RuleSetName: !Sub "default-result-set-${AWS::Region}-6"

# Active rules sets can not be deleted  
  SesActiveRulesSetDefault:
    Type: Custom::SetActiveRuleSet
    Properties:
      ServiceToken: !GetAtt CustomBackedLambda.Arn
      RuleSetName: !Ref SesReceiptRuleSet

  SesReceiptRuleTest:
    Type: AWS::SES::ReceiptRule
    Properties:
      RuleSetName: !Ref SesReceiptRuleSet
      Rule:
        Name: test-rule-1
        Enabled: true
        ScanEnabled: true
        TlsPolicy: Require
        Recipients:
          - !Ref RecipientEmail
        Actions:
          - SNSAction: 
              Encoding: UTF-8
              TopicArn: !Ref SnsTopic
  
  # ReceiptFilterBlock:
  #   Type: AWS::SES::ReceiptFilter
  #   Properties:
  #     Filter:
  #       Name: test-filter-block-1
  #       IpFilter:
  #         Policy: Allow
  #         Cidr: 0.0.0.0/0

  # ReceiptFilterAllow:
  #   Type: AWS::SES::ReceiptFilter
  #   Properties:
  #     Filter:
  #       Name: test-filter-allow-1
  #       IpFilter:
  #         Policy: Allow
  #         Cidr: 169.254.169.254/32

Outputs:
  CustomLambdaOutput: 
    Description: Message from the SES domain verification custom resource
    Value: !GetAtt SesDomainIdentityMail.message