AWSTemplateFormatVersion: 2010-09-09
Description: Static website with cloudfront, s3 origin, and lambda edge for redirects

Parameters:
  Domain:
    Type: String
  ZoneId:
    Type: String
  WebAclArn:
    Type: String

Conditions:
  UseWaf: !Not [!Equals [!Ref WebAclArn, ""]]

Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunctionAddHeaders:
    Type: AWS::Lambda::Function
    Properties:
      Description: Add http headers
      Handler: 'index.handler'
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs20.x
      Timeout: 25
      Code:
        ZipFile: |
          'use strict';

          exports.handler = (event, context, callback) => {
            const response = event.Records[0].cf.response;
            const headers = response.headers;

            headers['Strict-Transport-Security'] = [{
              key: 'Strict-Transport-Security',
              value: 'max-age=31536000; includeSubdomains; preload'
            }];

            callback(null, response);
          };

  LambdaVersionAddHeadersv1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunctionAddHeaders

  LambdaFunctionRedirect:
    Type: AWS::Lambda::Function
    Properties:
      Description: Host based redirect
      Handler: 'index.handler'
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs20.x
      Timeout: 5
      Code:
        ZipFile: !Sub 
          - | 
            'use strict';

            exports.handler = (event, context, callback) => {
              let request = event.Records[0].cf.request;
              let host = request.headers.host[0].value;
              let url = 'https://${TargetDNS}' + request.uri;

              if (host == "${RedirectDNS}") {
                var response = {
                  status: '301',
                  statusDescription: 'Moved Permanently',
                  headers: {
                    'location': [{
                      key: 'Location',
                      value: url,
                    }],
                  },
                };
                callback(null, response);
              }
              else {
                callback(null, request);
              }
            };
          - TargetDNS: !Sub "www.${Domain}"
            RedirectDNS: !Ref Domain

  LambdaVersionRedirectv1:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunctionRedirect

  AcmCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref Domain
      DomainValidationOptions:
        - DomainName: !Ref Domain
          HostedZoneId: !Ref ZoneId
      ValidationMethod: DNS
      SubjectAlternativeNames: 
        - !Sub www.${Domain}

  r53RecordGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref ZoneId
      RecordSets:
        - Name: !Sub "www.${Domain}"
          Type: A
          AliasTarget:
            DNSName: !GetAtt CfDist.DomainName
            HostedZoneId: !Ref ZoneId
        - Name: !Sub "www.${Domain}"
          Type: AAAA
          AliasTarget:
            DNSName: !GetAtt CfDist.DomainName
            HostedZoneId: !Ref ZoneId

  # r53RecordGroupRedirect:
  #   Type: AWS::Route53::RecordSetGroup
  #   DependsOn: r53RecordGroup
  #   Properties:
  #     HostedZoneId: !Ref ZoneId
  #     RecordSets:
  #       - Name: !Sub "${Domain}"
  #         Type: A
  #         AliasTarget:
  #           DNSName: !Sub "${Domain}"
  #           HostedZoneId: !Ref ZoneId
  #       - Name: !Sub "${Domain}"
  #         Type: AAAA
  #         AliasTarget:
  #           DNSName: !Sub "${Domain}"
  #           HostedZoneId: !Ref ZoneId

  CfOai:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref Domain

  CfDist:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - S3BucketPolicy
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub "www.${Domain}"
        WebACLId: !If [UseWaf, !Ref WebAclArn, !Ref "AWS::NoValue"]
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCert
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: !GetAtt S3Bucket.RegionalDomainName
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CfOai]]
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
            - HEAD
            - GET
          ForwardedValues:
            QueryString: false
          LambdaFunctionAssociations:
            - EventType: 'origin-response'
              LambdaFunctionARN: !Join
                - ':'
                - - !GetAtt [LambdaFunctionAddHeaders, Arn]
                  - !GetAtt [LambdaVersionAddHeadersv1, Version]
            - EventType: 'viewer-request'
              LambdaFunctionARN: !Join 
                - ':'
                - - !GetAtt [LambdaFunctionRedirect, Arn]
                  - !GetAtt [LambdaVersionRedirectv1, Version]
          TargetOriginId: !GetAtt S3Bucket.RegionalDomainName
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref Domain

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CfOai.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Join ['', [!GetAtt S3Bucket.Arn, "/*"]]